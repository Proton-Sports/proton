// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Proton.Server.Infrastructure.Persistence;

#nullable disable

namespace Proton.Server.Resource.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    [Migration("20240225115838_UpdateShopVehicles2")]
    partial class UpdateShopVehicles2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Proton.Server.Core.Models.Log.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ipv4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ipv6")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TimestampLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimestampLogout")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.OwnedVehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AltVColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AltVHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ColorDisplayname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchasedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerGarages");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.RaceMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("RaceMaps");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.RacePoint", b =>
                {
                    b.Property<long>("MapId")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<float>("Radius")
                        .HasColumnType("real");

                    b.ComplexProperty<Dictionary<string, object>>("Position", "Proton.Server.Core.Models.RacePoint.Position#Vector3", b1 =>
                        {
                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");
                        });

                    b.HasKey("MapId", "Index");

                    b.ToTable("RacePoints");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.RaceStartPoint", b =>
                {
                    b.Property<long>("MapId")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Position", "Proton.Server.Core.Models.RaceStartPoint.Position#Vector3", b1 =>
                        {
                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Rotation", "Proton.Server.Core.Models.RaceStartPoint.Rotation#Vector3", b1 =>
                        {
                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");
                        });

                    b.HasKey("MapId", "Index");

                    b.ToTable("RaceStartPoints");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Money")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AltVHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.Log.Session", b =>
                {
                    b.HasOne("Proton.Server.Core.Models.User", "_User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_User");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.OwnedVehicle", b =>
                {
                    b.HasOne("Proton.Server.Core.Models.User", null)
                        .WithMany("Garage")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.RacePoint", b =>
                {
                    b.HasOne("Proton.Server.Core.Models.RaceMap", "Map")
                        .WithMany("RacePoints")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.RaceStartPoint", b =>
                {
                    b.HasOne("Proton.Server.Core.Models.RaceMap", "Map")
                        .WithMany("StartPoints")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.RaceMap", b =>
                {
                    b.Navigation("RacePoints");

                    b.Navigation("StartPoints");
                });

            modelBuilder.Entity("Proton.Server.Core.Models.User", b =>
                {
                    b.Navigation("Garage");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
